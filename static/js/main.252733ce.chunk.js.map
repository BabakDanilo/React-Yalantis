{"version":3,"sources":["Person.js","PersonList.js","PersonBirthday.js","App.js","reportWebVitals.js","index.js"],"names":["Person","value","className","this","props","person","onChange","isActive","fullName","lastName","firstName","type","name","id","console","log","React","Component","PersonList","employees","onActivityChange","employeeSorted","sort","a","b","alphabetMap","Map","start","alphabetArray","Array","fill","map","_","idx","i","length","has","String","fromCharCode","set","j","toLowerCase","get","push","from","keys","key","$event","target","PersonBirthday","employeesActivity","employeesActive","filter","employee","monthMap","monthNames","index","employe","parseInt","dob","slice","year","date","month","App","state","axios","then","res","data","setState","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.252733ce.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nexport default class Person extends React.Component {\n  render() {\n    let className = \"employee\";\n\n    let { person, isActive, onChange } = this.props;\n\n    const fullName = person.lastName + \" \" + person.firstName;\n    \n     function changed(value){\n      let x = value;\n      className += x ? \" employee-active\" : \"\";\n      console.log(className)\n    }\n\n\n    return (\n      <div onChange={onChange}>\n        <h4 className={className}>{fullName}</h4>\n        <input type=\"radio\" value=\"true\" name={person.id} onChange = {changed(true)} />\n        active\n        <input type=\"radio\" value=\"false\" name={person.id}  />\n        not active\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Person from \"./Person\";\n\nexport default class PersonList extends React.Component {\n  render() {\n    function compareNumbers(a, b) {\n      if (a.lastName < b.lastName) return -1;\n      if (a.lastName > b.lastName) return 1;\n      return 0;\n    }\n\n    const employees = this.props.employees ? this.props.employees : [];\n    const onActivityChange = this.props.onActivityChange;\n\n    const employeeSorted = employees.sort(compareNumbers);\n\n    const alphabetMap = new Map();\n\n    function range(start, end) {\n      return Array(end - start + 1)\n        .fill()\n        .map((_, idx) => start + idx);\n    }\n    const alphabetArray = range(97, 122);\n\n    for (let i = 0; i < alphabetArray.length; i++) {\n      if (!alphabetMap.has(String.fromCharCode(alphabetArray[i]))) {\n        alphabetMap.set(String.fromCharCode(alphabetArray[i]), []);\n      }\n\n      for (let j = 0; j < employeeSorted.length; j++) {\n        if (\n          employeeSorted[j].lastName[0].toLowerCase() ===\n          String.fromCharCode(alphabetArray[i])\n        ) {\n          alphabetMap\n            .get(String.fromCharCode(alphabetArray[i]))\n            .push(employeeSorted[j]);\n        }\n      }\n    }\n\n    return (\n      <div className=\"person-wrap\">\n        <div>\n          {Array.from(alphabetMap.keys()).map((key) => {\n            return (\n              <div key={key}>\n                <h2>{key}</h2>\n\n                {alphabetMap.get(key).map((person) => {\n                  return (\n                    <Person\n                      key={person.id}\n                      isActive={false}\n                      person={person}\n                      onChange={($event) =>\n                        onActivityChange(person.id, $event.target.value)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nexport default class PersonBirthday extends React.Component {\n  render() {\n    const employees = this.props.employees ? this.props.employees : [];\n    const employeesActivity = this.props.employeesActivity\n      ? this.props.employeesActivity\n      : {};\n\n    const employeesActive = employees.filter((employee) => {\n      return employeesActivity[employee.id];\n    });\n\n    const monthMap = new Map();\n\n    var monthNames = [\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n    ];\n\n    let dates = [];\n\n    for (let i = 0; i < monthNames.length; i++) {\n      if (!monthMap.has(String.fromCharCode(monthNames[i]))) {\n        monthMap.set(monthNames[i], []);\n      }\n    }\n    console.log(monthMap);\n    let i = 0;\n    for (let key in employeesActive) {\n      let index = employeesActive.map((employe) =>\n        parseInt(employe.dob.slice(5, 7))\n      )[i];\n      let year = employeesActive.map((employe) =>\n        parseInt(employe.dob.slice(0, 4))\n      )[i];\n      let date = employeesActive.map((employe) =>\n        parseInt(employe.dob.slice(8, 10))\n      )[i];\n\n      let month = monthNames[(index + 6) % 12];\n      monthMap\n        .get(month)\n        .push(\n          employeesActive[i].lastName +\n            \" \" +\n            employeesActive[i].firstName +\n            \" - \" +\n            date +\n            \" \" +\n            month +\n            \", \" +\n            year\n        );\n\n      i++;\n    }\n    console.log(monthMap.get(\"March\"));\n    return (\n      <div>\n        {Array.from(monthMap.keys()).map((key) => {\n          return (\n            <div key={key}>\n              <h2>{monthMap.get(key).length >= 1 ? key : null}</h2>\n              {monthMap.get(key).map((person) => {\n                return <li>{person}</li>;\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport PersonList from \"./PersonList\";\nimport PersonBirthday from \"./PersonBirthday\";\n\nclass App extends React.Component {\n  state = {\n    employees: [],\n    employeesActivity: {},\n  };\n\n  componentDidMount() {\n    axios\n      .get(`https://yalantis-react-school-api.yalantis.com/api/task0/users`)\n      .then((res) => {\n        const employees = res.data;\n        this.setState({ ...this.state, employees });\n      });\n  }\n\n  onActivityChange(id, value) {\n    let employeesActivity = { ...this.state.employeesActivity };\n    employeesActivity[id] = value === \"true\" ? true : false;\n\n    this.setState({\n      ...this.state,\n      employeesActivity,\n    });\n  }\n\n  render() {\n    console.log(PersonBirthday);\n    return (\n      <div className=\"App\">\n        <div class=\"container\">\n          <h1>Employees</h1>\n          <PersonList\n            employees={this.state.employees}\n            onActivityChange={(id, value) => this.onActivityChange(id, value)}\n          />\n        </div>\n        <div class=\"container\">\n          <h1>Employees Birthday</h1>\n          {\n            <PersonBirthday\n              employees={this.state.employees}\n              employeesActivity={this.state.employeesActivity}\n            />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport PersonList from \"./PersonList\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}